To fine-tune a medium-sized BERT model on your sentiment analysis dataset, you can follow a similar approach as before, but with the medium-sized BERT model (`bert-large-uncased` or another medium-sized variant). Here's the complete code adapted for a medium-sized BERT model:

### Step-by-Step Approach

1. **Install the necessary libraries:**
   Ensure you have the `transformers`, `torch`, and `pandas` libraries installed.
   ```bash
   pip install transformers torch pandas
   ```

2. **Import libraries and load the dataset:**
   Load your dataset using `pandas`.
   ```python
   import pandas as pd
   from transformers import BertTokenizer, BertForSequenceClassification, Trainer, TrainingArguments
   from sklearn.model_selection import train_test_split
   import torch

   # Load the dataset
   df = pd.read_csv('path_to_your_dataset.csv')
   ```

3. **Preprocess the dataset:**
   Convert labels to numeric form and split the dataset into training and validation sets.
   ```python
   # Convert sentiment labels to numeric
   df['sentiment'] = df['sentiment'].map({'positive': 2, 'neutral': 1, 'negative': 0})

   # Split the dataset
   train_df, val_df = train_test_split(df, test_size=0.2, random_state=42)
   ```

4. **Tokenize the dataset:**
   Use the BERT tokenizer to tokenize the text data.
   ```python
   tokenizer = BertTokenizer.from_pretrained('bert-large-uncased')

   def tokenize_function(examples):
       return tokenizer(examples['review'], padding='max_length', truncation=True)

   train_encodings = tokenizer(train_df['review'].tolist(), truncation=True, padding=True)
   val_encodings = tokenizer(val_df['review'].tolist(), truncation=True, padding=True)
   ```

5. **Create a PyTorch Dataset:**
   Convert the tokenized data into a PyTorch dataset.
   ```python
   class SentimentDataset(torch.utils.data.Dataset):
       def __init__(self, encodings, labels):
           self.encodings = encodings
           self.labels = labels

       def __getitem__(self, idx):
           item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()}
           item['labels'] = torch.tensor(self.labels[idx])
           return item

       def __len__(self):
           return len(self.labels)

   train_dataset = SentimentDataset(train_encodings, train_df['sentiment'].tolist())
   val_dataset = SentimentDataset(val_encodings, val_df['sentiment'].tolist())
   ```

6. **Fine-tune the BERT model:**
   Set up the medium-sized BERT model and the training arguments, and then use the `Trainer` API to train the model.
   ```python
   model = BertForSequenceClassification.from_pretrained('bert-large-uncased', num_labels=3)

   training_args = TrainingArguments(
       output_dir='./results',          # output directory
       num_train_epochs=3,              # number of training epochs
       per_device_train_batch_size=8,   # batch size for training
       per_device_eval_batch_size=16,   # batch size for evaluation
       warmup_steps=500,                # number of warmup steps for learning rate scheduler
       weight_decay=0.01,               # strength of weight decay
       logging_dir='./logs',            # directory for storing logs
       logging_steps=10,
       evaluation_strategy="epoch"
   )

   trainer = Trainer(
       model=model,                         # the instantiated ðŸ¤— Transformers model to be trained
       args=training_args,                  # training arguments, defined above
       train_dataset=train_dataset,         # training dataset
       eval_dataset=val_dataset             # evaluation dataset
   )

   trainer.train()
   ```

7. **Evaluate the model:**
   After training, evaluate the model on the validation dataset.
   ```python
   results = trainer.evaluate()
   print(results)
   ```

### Complete Code

```python
import pandas as pd
from transformers import BertTokenizer, BertForSequenceClassification, Trainer, TrainingArguments
from sklearn.model_selection import train_test_split
import torch

# Load the dataset
df = pd.read_csv('path_to_your_dataset.csv')

# Convert sentiment labels to numeric
df['sentiment'] = df['sentiment'].map({'positive': 2, 'neutral': 1, 'negative': 0})

# Split the dataset
train_df, val_df = train_test_split(df, test_size=0.2, random_state=42)

# Tokenize the dataset
tokenizer = BertTokenizer.from_pretrained('bert-large-uncased')

def tokenize_function(examples):
    return tokenizer(examples['review'], padding='max_length', truncation=True)

train_encodings = tokenizer(train_df['review'].tolist(), truncation=True, padding=True)
val_encodings = tokenizer(val_df['review'].tolist(), truncation=True, padding=True)

# Create a PyTorch Dataset
class SentimentDataset(torch.utils.data.Dataset):
    def __init__(self, encodings, labels):
        self.encodings = encodings
        self.labels = labels

    def __getitem__(self, idx):
        item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()}
        item['labels'] = torch.tensor(self.labels[idx])
        return item

    def __len__(self):
        return len(self.labels)

train_dataset = SentimentDataset(train_encodings, train_df['sentiment'].tolist())
val_dataset = SentimentDataset(val_encodings, val_df['sentiment'].tolist())

# Fine-tune the medium-sized BERT model
model = BertForSequenceClassification.from_pretrained('bert-large-uncased', num_labels=3)

training_args = TrainingArguments(
    output_dir='./results',          # output directory
    num_train_epochs=3,              # number of training epochs
    per_device_train_batch_size=8,   # batch size for training
    per_device_eval_batch_size=16,   # batch size for evaluation
    warmup_steps=500,                # number of warmup steps for learning rate scheduler
    weight_decay=0.01,               # strength of weight decay
    logging_dir='./logs',            # directory for storing logs
    logging_steps=10,
    evaluation_strategy="epoch"
)

trainer = Trainer(
    model=model,                         # the instantiated ðŸ¤— Transformers model to be trained
    args=training_args,                  # training arguments, defined above
    train_dataset=train_dataset,         # training dataset
    eval_dataset=val_dataset             # evaluation dataset
)

trainer.train()

# Evaluate the model
results = trainer.evaluate()
print(results)
```

This code will fine-tune the medium-sized BERT model (`bert-large-uncased`) on your sentiment analysis dataset. Make sure to adjust paths and parameters as needed based on your specific dataset and requirements.
